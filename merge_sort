#include <iostream>
#include <stdlib.h>
#include <time.h>  
using namespace std;

void print_array(int *arr, int n)
{
	for(int i=0;i<n; i++)
		std::cout<< arr[i] <<" ";
	std::cout<<endl;
}

void merge(int *arr, int index, int length)
{
	int *L, *R;
	int size_L = length/2;
	int size_R = length-size_L;
	L = new int[size_L];
	R = new int[size_R];

	//right is always even
 	int ct_L = 0, ct_R = 0, index_array = index;
	
	while(ct_L <size_L)
	{
		L[ct_L] = arr[index + ct_L];
		R[ct_R] = arr[index + size_L + ct_R];
		ct_L++;ct_R++;
	}
	if(ct_R != size_R)
		R[ct_R] = arr[index + size_L + ct_R];

 	ct_L = 0; ct_R = 0;
	
	while(ct_L < size_L && ct_R < size_R)
	{
		if(L[ct_L] <= R[ct_R])
		{	
			arr[index_array] = L[ct_L];
			ct_L++;
		}
		else{
			arr[index_array] =R[ct_R];
			ct_R++;
		}
		index_array++;
	}
	//shorten using memcpy
	if(ct_R<size_R)
		while(ct_R<size_R)
		{
			arr[index_array] = R[ct_R];
			ct_R++;
			index_array++;
		}
	if(ct_L<size_L)
		while(ct_L<size_L)
		{
			arr[index_array] = L[ct_L];
			ct_L++;
			index_array++;
		}

	delete[] L;
	delete[] R;
}

void merge_sort(int *arr,int index, int length)
{
	int left_length = length/2;
	if(length>=2)
	{
		merge_sort(arr,index,left_length);
		merge_sort(arr,index+(length/2),length-left_length);
	}
	merge(arr,index,length);
}

void generate_array(int *arr, int n)
{
	 srand (time(NULL));

	for(int i=0;i<n; i++)
		arr[i] =   rand() % 100 + 1;
	
}

int main() {
   
	int length = 15;
	int *arr = new int[length];

	generate_array(arr,length);
	print_array(arr,length);	
	merge_sort(arr,0,length);
	print_array(arr,length);	

	delete[] arr;
    return 0;
	
}
